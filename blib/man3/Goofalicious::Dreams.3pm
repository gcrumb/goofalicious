.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Goofalicious::Dreams 3pm"
.TH Goofalicious::Dreams 3pm "2011-03-08" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Goofalicious::Dreams \- Create semi\-pseudo\-random dream monologues. Everybody wants to!
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Goofalicious::Dreams;
\&
\&  my $dreamer = Goofalicious::Dreams\->new ( dream_index => \*(Aq/foo/dream_index\*(Aq );
\&
\&  # Create a new monologue using a random selection...
\&  my $output_mode = \*(Aqplain_text\*(Aq;
\&  my $monologue = $dreamer\->create($output_mode);
\&
\&  # Or create a new monologue using a selected monologue
\&  $output_mode = \*(Aqhtml\*(Aq;
\&  my $selected_monologue = 2; # Or whatever the index number of the monologue is
\&                              # (more explanation on how to derive the index below).
\&  $monologue = $dreamer\->create($selected_mologue, $output_mode);
\&
\&  # Or create a monologue based on a custom string
\&  my $custom_monologue = "Now is the time for all good <person> to come to the party.";
\&  $monologue = $dreamer\->create($custom_monologue, $output_mode);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
I wrote the original code for this many moons ago, in *gack* \s-1VB\s0. About 4 months later,
I re-wrote it in Perl as a (very) crude \s-1CGI\s0 script. It is now being reborn and packaged
in its full glory as a Perl module, destined for use as the back-end to a Mason script.
.PP
Visit <http://www.moodindigo.ca/dreams/> to see how it actually works.
.SH "PUBLIC METHODS"
.IX Header "PUBLIC METHODS"
.IP "\fB\f(BInew()\fB\fR" 4
.IX Item "new()"
Class constructor. This method accepts one argument: \fBdream_index\fR, which provides the
path and filename of the Berkeley db file containing the raw data for the applet.
.IP "\fB\f(BIinit()\fB\fR" 4
.IX Item "init()"
This method is called via the constructor method by default, but can be
called at any time to override or reset its properties.
.Sp
\&\fBinit\fR returns a copy of itself, so it can be referenced via assignment:
.Sp
.Vb 1
\&  my $updated_object = $object\->init(%new_args);
.Ve
.Sp
or directly to update an existing object:
.Sp
.Vb 1
\&  $object\->init(%new_args);
.Ve
.Sp
\&\fB\s-1NOTE:\s0\fR The fact that you have set properties in this method does \fBnot\fR
mean that anything will be done with them, necessarily.
.IP "\fB\f(BIdream_list()\fB\fR" 4
.IX Item "dream_list()"
Returns an arrayref of all available monologues, each prepped with substitute values.
.Sp
Optionally, if the \fBraw\fR argument is True, no substitution is performed. If the
optional truncate value is a positive integer, each monologue is truncated to
the specified length.
.IP "\fB\f(BIcreate()\fB\fR" 4
.IX Item "create()"
Performs a series of pseudo-random substitutions of tagged data within
a string, replacing each so-identified section with a word or phrase
contained in the appropriate part of the \fBwords\fR collection.
.Sp
This method accepts either an integer or a string. If an integer is passed,
then the string stored at that ordinal position in the \fBmonologues\fR
collection is retrieved and processed. If a string is passed, then that
string is processed instead.
.Sp
Returns the reconstructed string.
.SH "PRIVATE METHODS"
.IX Header "PRIVATE METHODS"
.IP "\fB\f(BI_load_index()\fB\fR" 4
.IX Item "_load_index()"
Loads a Berkeley \s-1DB\s0 index containing all necessary raw data for this applet.
Pushes the raw data into two structures:
.RS 4
.IP "\fBmonologues\fR" 4
.IX Item "monologues"
An arrayref of monologues. Each of these is a string containing the text of
the monologues with the generic word placeholders still in place.
.IP "\fBwords\fR" 4
.IX Item "words"
A hashref of word types. Word types consist of:
.Sp
.Vb 10
\&  Noun \- any noun or moninal phrase that does not fit into the \*(AqName\*(Aq category
\&  Pronoun
\&  Adjective \- any word or phrase that modifies a noun
\&  Preposition \- again, can be a word or a phrase
\&  Article
\&  Verb \- verbs must be present tense, intransitive and in the form of a gerund (i.e. \*(Aq...ing\*(Aq)
\&  Adverb \- any word or phrase modifying a verb
\&  Punctuation \- not used
\&  Expletive \- any explosive utterance
\&  Name \- any word or phrase identifying a person, object or entity
\&  Place
\&  Number \- any word or phrase defining the number of Noun
\&  Emotion \- any word or phrase descriptive of emotional state
.Ve
.Sp
Each of the keys listed above contains an arrayref of individual words or phrases.
.RE
.RS 4
.Sp
This method returns an array containing the number of monologues and words successfully
loaded, in that order.
.Sp
\&\fBNote:\fR While it is possible to reference this method directly, it is preferable to
load a new index via the \fB\f(BIinit()\fB\fR method instead. This gives me the luxury of rewriting
the \fB_load_index\fR method in the future without affecting the public \s-1API\s0.
.Sp
The \fBnew_index\fR argument is designed for internal use only.
.RE
.IP "\fB\f(BI_process()\fB\fR" 4
.IX Item "_process()"
Performs the actual task of substituting randomly selected words of the type
specified in the string passed to this method.
.IP "\fB\f(BI_grammaticise()\fB\fR" 4
.IX Item "_grammaticise()"
Performs a few small grammar-related housekeeping tasks:
.RS 4
.IP "Changes 'a' to 'an' where appropriate" 4
.IX Item "Changes 'a' to 'an' where appropriate"
.PD 0
.IP "Cleans up whitespace as required" 4
.IX Item "Cleans up whitespace as required"
.IP "Fixes capitalisation where required" 4
.IX Item "Fixes capitalisation where required"
.RE
.RS 4
.RE
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://www.moodindigo.ca/dreams/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Dan McGarry, <dmcgarry@moodindigo.ca<gt>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 1998, 2003 by Dan McGarry
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
